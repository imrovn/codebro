name: Release Codebro CLI

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        arch: [ x64, arm64 ]
        exclude:
          # Exclude arm64 for Ubuntu as it's less common
          - os: ubuntu-latest
            arch: arm64
        include:
          # Add Windows x64 explicitly
          - os: windows-latest
            arch: x64

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # Cache Bun dependencies
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Install dependencies
      - name: Install dependencies
        run: bun install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build the project with Vite
      - name: Build with Vite
        run: bun run build

      # Compile executables for the target platform
      - name: Compile executable
        run: |
          bun build --compile --target=bun-${{ runner.os == 'windows-latest' && 'windows' || runner.os == 'macos-latest' && 'darwin' || 'linux' }}-${{ matrix.arch }} src/cli.ts --outfile dist/codebro-${{ runner.os == 'windows-latest' && 'windows' || runner.os == 'macos-latest' && 'darwin' || 'linux' }}-${{ matrix.arch }}${{ runner.os == 'windows-latest' && '.exe' || '' }}
        env:
          BUN_COMPILE: 1

      # Upload compiled executable as an artifact
      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: codebro-${{ runner.os == 'windows-latest' && 'windows' || runner.os == 'macos-latest' && 'darwin' || 'linux' }}-${{ matrix.arch }}-${{ github.run_id }}
          path: dist/codebro-${{ runner.os == 'windows-latest' && 'windows' || runner.os == 'macos-latest' && 'darwin' || 'linux' }}-${{ matrix.arch }}${{ runner.os == 'windows-latest' && '.exe' || '' }}
          if-no-files-found: error

  publish:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Bun
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # Cache Bun dependencies
      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Install dependencies
      - name: Install dependencies
        run: bun install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Download all artifacts (executables)
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/artifacts

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Upload executables to GitHub Release
      - name: Upload Release Assets
        run: |
          for artifact in dist/artifacts/*/*; do
            gh release upload ${{ github.ref_name }} "$artifact" --repo ${{ github.repository }}
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Set up Node.js for npm publish
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      # Publish to npm
      - name: Publish to npm
        run: bun run release-latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}